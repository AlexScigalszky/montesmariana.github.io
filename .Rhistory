aspect.ratio = 1)
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 2, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "none",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
ggsave(paste0(my_model, ".svg"),
device = "svg",
units = 'cm',
bg = 'transparent')
library(RColorBrewer)
brewer.pal(n_distinct(my_cloud$broadsense), "Set1")
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 2, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "bottom",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 3, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "none",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 4, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "none",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
ggsave(paste0(my_model, ".svg"),
device = "svg",
units = 'cm',
bg = 'transparent')
my_cloud %>% count(broadsense)
my_cloud %>% mutate(broadsense = fct_infreq(broadsense)) %>% count(broadsense)
my_cloud <- clouds %>%
select(model.x = paste0(my_model, '.x'),
model.y = paste0(my_model, '.y'),
window5semcor, window5cues, broadsense,
building, register, `_id`) %>%
mutate(text = str_c(window5semcor, window5cues, sep = '<br />')) %>%
mutate(broadsense = fct_infreq(broadsense)))
my_cloud <- clouds %>%
select(model.x = paste0(my_model, '.x'),
model.y = paste0(my_model, '.y'),
window5semcor, window5cues, broadsense,
building, register, `_id`) %>%
mutate(text = str_c(window5semcor, window5cues, sep = '<br />')) %>%
mutate(broadsense = fct_infreq(broadsense))
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 4, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "none",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
my_cloud <- clouds %>%
select(model.x = paste0(my_model, '.x'),
model.y = paste0(my_model, '.y'),
window5semcor, window5cues, broadsense,
building, register, `_id`) %>%
mutate(text = str_c(window5semcor, window5cues, sep = '<br />')) %>%
mutate(broadsense = fct_relevel(broadsense, "building", "congregation", "organization", "metalinguistic", "service"))
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 4, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "none",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
my_cloud <- clouds %>%
select(model.x = paste0(my_model, '.x'),
model.y = paste0(my_model, '.y'),
window5semcor, window5cues, broadsense,
building, register, `_id`) %>%
mutate(text = str_c(window5semcor, window5cues, sep = '<br />')) %>%
mutate(broadsense = fct_relevel(broadsense, "building", "congregation", "service", "metalinguistic", "organization"))
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 4, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "none",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
organization
my_cloud <- clouds %>%
select(model.x = paste0(my_model, '.x'),
model.y = paste0(my_model, '.y'),
window5semcor, window5cues, broadsense,
building, register, `_id`) %>%
mutate(text = str_c(window5semcor, window5cues, sep = '<br />')) %>%
mutate(broadsense = fct_relevel(broadsense, "building", "congregation", "organization", "metalinguistic", "service"))
ggplot(my_cloud) +
geom_point(aes(x = model.x,
y = model.y,
color = broadsense),
size = 4, alpha = 0.54) +
labs(x = '', y = '', color = 'Senses') +
scale_color_brewer(palette = "Set1") +
#xlim(c(-0.55, 0.55)) + ylim(c(-0.55, 0.55)) +
theme(panel.background = element_rect(fill = 'transparent',
color = NA),
plot.background = element_rect(fill = 'transparent',
color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = 'gray'),
axis.ticks = element_line(color = 'gray'),
axis.text = element_text(color = 'gray'),
legend.position = "none",
#legend.text = element_text(size = 8),
aspect.ratio = 1)
ggsave(paste0(my_model, ".svg"),
device = "svg",
units = 'cm',
bg = 'transparent')
plot_ly(data = my_cloud,
type = 'scatter', mode = 'markers',
x = ~model.x,
y = ~model.y,
color = ~broadsense,
size = I(20),
text = ~text,
#text = ~get("_id"),
hoverinfo = "text")
read_tsv("church.withcues.tsv")
models
View(models)
library(MASS)
library(vegan)
files.names <- models$model
expand.grid(files.names, files.names)
class(expand.grid(files.names, files.names))
nrow(expand.grid(files.names, files.names))
length(colnames(expand.grid(files.names, files.names)))
nrow(as.matrix(expand.grid(files.names, files.names)))
?procrustes
max(models$tokens)
min(models$tokens)
x <- as.matrix(expand.grid(files.names, files.names))
nrow(x)
dim(x)
y <- matrix(x, nrow = length(files.names))
dim(y)
length(files.names)
104*104
length(colnames(y))
y
str(y)
length(nrow(x))
nrow(x)
10816/104
y <- matrix(x, nrow = 104)
dim(y)
y[1:5,1:5]
## Working directory should be the dir with isoMDS solutions
models <- read_tsv("church.models.tsv")
files.names <- models$model
newmat <- files.names
n <- files.names(length)
n <- length(files.names)
newmat <- expand.grid(files.names, files.names)
newmat <- as.matrix(newmat)
str(newmat)
newmat[1:5,]
models %>% filter(tokens == min(models$tokens))
cloud <- read_tsv("church.tsv")
nrow(cloud)
cloud %>% select(`_id`, starts_with('nocomp.'))
library(tidyverse)
cloud %>% select(starts_with('nocomp'))
library(tidyselect)
vars_select(names(cloud), starts_with('nocomp'))
coords <- vars_select(names(cloud), starts_with('nocomp'))
cloud %>% select(`_id`, coords)
cloud %>% select(starts_with('nocomp'))
cloud
cloud %>% dplyr::select(`_id`)
cloud %>% dplyr::select(starts_with('nocomp'))
cloud %>% dplyr::select(`_id`, starts_with('nocomp'))
subcloud <- cloud %>% dplyr::select(`_id`, starts_with('nocomp'))
nrow(subcloud)
rowSums(subcloud != 0)
length(colnames(subcloud))
subcloud %>% mutate(n = (rowSums(subcloud != 0)-1)/2)
subcloud %>% mutate(n = (rowSums(subcloud != 0)-1)/2) %>% count(n)
subcloud <- subcloud %>%  mutate(n = (rowSums(subcloud != 0)-1)/2)
## Reads list of tokens that are in the intersection of all models
rnset <- subcloud %>% mutate(n = (rowSums(subcloud != 0)-1)/2) %>%
filter(n == max(n)) %>%
pull(`_id`)
length(rnset)
rnset
#rnset <- read.table("tokenIDs.txt", header=F)
rnset <- as.matrix(rnset)
rnset
res <- c()
mod1 <- newmat[1,1]
mod2 <- newmat[1,2]
mod1
mod2
paste0(mod1, '.x')
cloud[rnset[1:5], c(paste0(mod1, '.x'), paste0(mod2,'.y'))]
## Reads list of tokens that are in the intersection of all models
subcloud <- subcloud %>% mutate(n = (rowSums(subcloud != 0)-1)/2) %>%
filter(n == max(n))
rnset <- subcloud$`_id`
select(cloud, paste0(mod1, '.x'), paste0(mod1, '.y'))
dplyr::select(cloud, paste0(mod1, '.x'), paste0(mod1, '.y'))
data.frame(subcloud)
data.frame(subcloud) %>% str()
data.frame(subcloud) %>% summary()
data.frame(subcloud) %>% nrow()
sub <- data.frame(subcloud)[2:length(colnames(subcloud))-1]
length(colnames(subcloud))
length(colnames(sub))
colnames(sub)[1]
sub <- data.frame(subcloud)[,2:length(colnames(subcloud))-1]
length(colnames(sub))
colnames(subcloud[1])
colnames(subcloud)[1]
colnames(subcloud)[2]
colnames(subcloud)[-1]
sub <- dplyr::select(subcloud, -`_id`, -n)
length(colnames(subcloud))
length(colnames(sub))
sub <- data.frame(sub)
row.names(sub) <- subcloud$`_id`
subcloud[1:3, 1:3]
sub[1:3, 1:2]
sub <- dplyr::select(subcloud, -`_id`, -n) %>% data.frame()
rnset <- subcloud$`_id`
row.names(sub) <- rnset
sub[1:3, 1:3]
sub[rnset[1:5], c(paste0(mod1, '.x'), paste0(mod1, '.y'))]
sub[c(paste0(mod1, '.x'), paste0(mod1, '.y'))]
res
newmat
## Procrustes analysis
for (i in 1:nrow(newmat)) {
tryCatch({
mat1 <- sub[c(paste0(newmat[i, 1], '.x'), paste0(newmat[i, 1], '.y'))]
mat2 <- sub[c(paste0(newmat[i, 2], '.x'), paste0(newmat[i, 2], '.y'))]
res[i] <- procrustes(mat1, mat2, symmetric = T)$ss
# res[i] <- procrustes(read.table(newmat[i,1], header=T, row.names=1, sep="\t")[rnset, ], read.table(newmat[i,2], header=T, row.names=1, sep="\t")[rnset, ], symmetric=T)$ss
}, error = function(e) {
res[i] <- NA
print(paste0(newmat[i,1], " ", newmat[i,2]))
})
}
head(res)
str(res)
nrow(matrix(res, row=length(files.names)))
nrow(matrix(res, nrow=length(files.names)))
ncol(matrix(res, nrow=length(files.names)))
matrix(res, nrow=length(files.names))[1:3, 1:3]
## Convert to similarity matrix
results <- matrix(res, nrow=n)
## Convert to similarity matrix
res <- matrix(res, nrow=n)
# convertednames <- gsub("(*)\\.ttmx\\.k2\\.points\\.txt", "\\1", files.names)
rownames(res) <- files.names
colnames(res) <- files.names
## Apply repeatedisoMDS
wwmx <- res
if (wwmx[1,1] > 0) { wwmx <- max(wwmx) - wwmx }
wwmx[wwmx <= 0] <- 0.0000001
for (i in 1:dim(wwmx)[1]) {
wwmx[i, i] <- 0
}
newmat[1,1]
newmat[1,2]
wwmx[1:5, 1:5]
dst <- as.dist(wwmx)
function(dst, k=k, nrepetitions=10, ...) {
# ----------------------------------------------------------
# uses initMDS(..) from package vegan
# ----------------------------------------------------------
dst.isoMDS <- isoMDS(dst, y=initMDS(dst), k=k, ...)
for (i in 2:nrepetitions) {
dst.isoMDS2 <- isoMDS(dst, y=initMDS(dst), k=k, ...)
if (dst.isoMDS2$stress < dst.isoMDS$stress) {
dst.isoMDS <- dst.isoMDS2
}
}
return(dst.isoMDS)
}
k <- 2
dst.isoMDS <- repeatedIsoMDS(dst, k=k)
repeatedIsoMDS <- function(dst, k=k, nrepetitions=10, ...) {
# ----------------------------------------------------------
# uses initMDS(..) from package vegan
# ----------------------------------------------------------
dst.isoMDS <- isoMDS(dst, y=initMDS(dst), k=k, ...)
for (i in 2:nrepetitions) {
dst.isoMDS2 <- isoMDS(dst, y=initMDS(dst), k=k, ...)
if (dst.isoMDS2$stress < dst.isoMDS$stress) {
dst.isoMDS <- dst.isoMDS2
}
}
return(dst.isoMDS)
}
k <- 2
dst.isoMDS <- repeatedIsoMDS(dst, k=k)
#     dst.isoMDS2 <- isoMDS(dst, y=initMDS(dst), k=k, ...)
#     if (dst.isoMDS2$stress < dst.isoMDS$stress) {
#       dst.isoMDS <- dst.isoMDS2
#     }
#   }
#   return(dst.isoMDS)
# }
#
# k <- 2
# dst.isoMDS <- repeatedIsoMDS(dst, k=k)
dst.isoMDS <- metaMDS(dst, k = 2, trymax = 30)
#     dst.isoMDS2 <- isoMDS(dst, y=initMDS(dst), k=k, ...)
#     if (dst.isoMDS2$stress < dst.isoMDS$stress) {
#       dst.isoMDS <- dst.isoMDS2
#     }
#   }
#   return(dst.isoMDS)
# }
#
# k <- 2
# dst.isoMDS <- repeatedIsoMDS(dst, k=k)
dst.MDS <- metaMDS(dst, k = 2, trymax = 30)
stress <- dst.MDS$stress
str(dst.MDS)
str(dst.MDS$points)
head(dst.MDS$points)
# add coords to models' file
tibble(dst.MDS$points) %>% rename(model.x = MDS1, model.y = MDS2)
# add coords to models' file
tibble(dst.MDS$points) %>% rename(model.x = 'MDS1', model.y = 'MDS2')
# add coords to models' file
tibble(dst.MDS$points)
# add coords to models' file
as_tibble(dst.MDS$points)
# add coords to models' file
as_tibble(dst.MDS$points) %>% rename(model.x = MDS1)
# add coords to models' file
as_tibble(dst.MDS$points) %>% rename(model.x = MDS1, model.y = MDS2) %>% mutate(model = row.names(dst.MDS$points))
# add coords to models' file
as_tibble(rownames_to_column(dst.MDS$points))
# add coords to models' file
is.data.frame(dst.MDS$points)
# add coords to models' file
class(dst.MDS$points)
# add coords to models' file
as.data.frame(dst.MDS$points)
# add coords to models' file
as_tibble(as.data.frame(dst.MDS$points))
# add coords to models' file
as_tibble(rownames_to_column(as.data.frame(dst.MDS$points)))
# add coords to models' file
dst.MDS$points %>% as.data.frame
# add coords to models' file
dst.MDS$points %>% as.data.frame %>% rownames_to_column
# add coords to models' file
dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble
# add coords to models' file
dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble %>%
setNames(., c('model', 'model.x', 'model.y'))
# add coords to models' file
dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble %>%
setNames(., c('model', 'model.x', 'model.y')) %>%
left_join(models, by = 'model')
# add coords to models' file
dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble %>%
setNames(., c('model', 'model.x', 'model.y')) %>%
left_join(models, by = 'model') %>% write_tsv('church.models.tsv')
library(ggplot2)
# add coords to models' file
models.w.coords <- dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble %>%
setNames(., c('model', 'model.x', 'model.y')) %>%
left_join(models, by = 'model')
ggplot(models.w.coords) +
geom_point(x = model.x, y = model.y)
models.w.coords
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y))
models.w.coords %>% count(compounsd)
models.w.coords %>% count(compounds)
models.w.coords %>% count(tokleft)
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = tokleft))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(tokleft)))
models.w.coords %>% count(tokpos)
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(tokpos)))
models.w.coords %>% count(weight)
colnames(models.w.coords)
models.w.coords %>% count(mincws)
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(mincws)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socccorpus)))
models.w.coords %>% count(socclength)
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socclength)))
models.w.coords %>% mutate(socclength_group = fct_relabel(factor(socclength), if_else(socclength == '10k', '10k',
if_else(socclength == '5k', '5k', 'focc'))))
models.w.coords %>% mutate(socclength_group = if_else(socclength == '10k', '10k', if_else(socclength == '5k', '5k', 'focc'))) %>% count(socclength_group)
models.w.coords <- models.w.coords %>% mutate(socclength_group = if_else(socclength == '10k', '10k', if_else(socclength == '5k', '5k', 'focc'))) %>% count(socclength_group)
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socclength_group)))
# add coords to models' file
models.w.coords <- dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble %>%
setNames(., c('model', 'model.x', 'model.y')) %>%
left_join(models, by = 'model')
models.w.coords <- models.w.coords %>% mutate(socclength_group = if_else(socclength == '10k', '10k', if_else(socclength == '5k', '5k', 'focc')))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socclength_group)))
colnames(models.w.coords)
models.w.coords %>% count(soccleft)
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socleft)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(soccleft)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(soccleft), size = stress))
models.w.coords %>% write_tsv('church.models.tsv')
